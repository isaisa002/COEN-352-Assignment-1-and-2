package coen352.a1;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;


public class WarehouseJUnitTest{

        private static Warehouse_LinkedList wh = Warehouse_LinkedList();
        
        @BeforeAll
        public static void setUp()
        {
                // weren't able to read excel file -> storing informations from inventory list using objects and set functions from Inventory.java

                // 1. Inventory ID 1
                COEN352.a1.Inventory in1 = new COEN352.a1.Inventory();
                in1.setID("IN0001");
                in1.setName("Item 1");
                in1.setDescription("Desc 1");
                in1.setUnitPrice(51.00);
                in1.setQuantityInStock(25);
                in1.setInventoryValue(1275.00);
                in1.setReorderLevel(29);
                in1.setReorderTimeDays(13);
                in1.setQuantityInReorder(50);
                in1.setDiscontinuedStatus(true);//yellow:true

                // 2. Inventory ID 2
                COEN352.a1.Inventory in2 = new COEN352.a1.Inventory();
                in2.setID("IN0002");
                in2.setName("Item 2");
                in2.setDescription("Desc 2");
                in2.setUnitPrice(93.00);
                in2.setQuantityInStock(132);
                in2.setInventoryValue(12276.00);
                in2.setReorderLevel(231);
                in2.setReorderTimeDays(4);
                in2.setQuantityInReorder(50);
                in2.setDiscontinuedStatus(true); //yellow:true

                // 3. Inventory ID 3
                COEN352.a1.Inventory in3 = new COEN352.a1.Inventory();
                in3.setID("IN0003");
                in3.setName("Item 3");
                in3.setDescription("Desc 3");
                in3.setUnitPrice(57.00);
                in3.setQuantityInStock(151);
                in3.setInventoryValue(8607.00);
                in3.setReorderLevel(114);
                in3.setReorderTimeDays(11);
                in3.setQuantityInReorder(150);
                in3.setDiscontinuedStatus(false); //grey:false

                // 4. Inventory ID 4
                COEN352.a1.Inventory in4 = new COEN352.a1.Inventory();
                in4.setID("IN0004");
                in4.setName("Item 4");
                in4.setDescription("Desc 4");
                in4.setUnitPrice(19.00);
                in4.setQuantityInStock(186);
                in4.setInventoryValue(3534.00);
                in4.setReorderLevel(158);
                in4.setReorderTimeDays(6);
                in4.setQuantityInReorder(50);
                in4.setDiscontinuedStatus(false); //grey:false

                // 5. Inventory ID 5
                COEN352.a1.Inventory in5 = new COEN352.a1.Inventory();
                in5.setID("IN0005");
                in5.setName("Item 5");
                in5.setDescription("Desc 5");
                in5.setUnitPrice(75.00);
                in5.setQuantityInStock(62);
                in5.setInventoryValue(4650.00);
                in5.setReorderLevel(39);
                in5.setReorderTimeDays(12);
                in5.setQuantityInReorder(50);
                in5.setDiscontinuedStatus(false); //grey:false

                // 6. Inventory ID 6
                COEN352.a1.Inventory in6 = new COEN352.a1.Inventory();
                in6.setID("IN0006");
                in6.setName("Item 6");
                in6.setDescription("Desc 6");
                in6.setUnitPrice(11.00);
                in6.setQuantityInStock(5);
                in6.setInventoryValue(55.00);
                in6.setReorderLevel(9);
                in6.setReorderTimeDays(13);
                in6.setQuantityInReorder(150);
                in6.setDiscontinuedStatus(true); //yellow:true

                // 7. Inventory ID 7
                COEN352.a1.Inventory in7 = new COEN352.a1.Inventory();
                in7.setID("IN0007");
                in7.setName("Item 7");
                in7.setDescription("Desc 7");
                in7.setUnitPrice(56.00);
                in7.setQuantityInStock(58);
                in7.setInventoryValue(3248.00);
                in7.setReorderLevel(109);
                in7.setReorderTimeDays(7);
                in7.setQuantityInReorder(100);
                in7.setDiscontinuedStatus(false); //grey:false

                // 8. Inventory ID 8
                COEN352.a1.Inventory in8 = new COEN352.a1.Inventory();
                in8.setID("IN0008");
                in8.setName("Item 8");
                in8.setDescription("Desc 8");
                in8.setUnitPrice(38.00);
                in8.setQuantityInStock(101);
                in8.setInventoryValue(3838.00);
                in8.setReorderLevel(162);
                in8.setReorderTimeDays(3);
                in8.setQuantityInReorder(100);
                in8.setDiscontinuedStatus(true); //yellow:true

                // 9. Inventory ID 9
                COEN352.a1.Inventory in9 = new COEN352.a1.Inventory();
                in9.setID("IN0009");
                in9.setName("Item 9");
                in9.setDescription("Desc 9");
                in9.setUnitPrice(59.00);
                in9.setQuantityInStock(122);
                in9.setInventoryValue(7198.00);
                in9.setReorderLevel(82);
                in9.setReorderTimeDays(3);
                in9.setQuantityInReorder(150);
                in9.setDiscontinuedStatus(false); //grey:false

                // 10. Inventory ID 10
                COEN352.a1.Inventory in10 = new COEN352.a1.Inventory();
                in10.setID("IN0010");
                in10.setName("Item 10");
                in10.setDescription("Desc 10");
                in10.setUnitPrice(50.00);
                in10.setQuantityInStock(175);
                in10.setInventoryValue(8750.00);
                in10.setReorderLevel(283);
                in10.setReorderTimeDays(8);
                in10.setQuantityInReorder(150);
                in10.setDiscontinuedStatus(true); //yellow:true

                // 11. Inventory ID 11
                COEN352.a1.Inventory in11 = new COEN352.a1.Inventory();
                in11.setID("IN0011");
                in11.setName("Item 11");
                in11.setDescription("Desc 11");
                in11.setUnitPrice(59.00);
                in11.setQuantityInStock(176);
                in11.setInventoryValue(10384.00);
                in11.setReorderLevel(229);
                in11.setReorderTimeDays(1);
                in11.setQuantityInReorder(100);
                in11.setDiscontinuedStatus(true); //yellow:true

                // test inventories in the database function
                System.out.println("\nNumber of inventories in the database: " + wh.InventoriesInDatabase());

                // test total value of all the inventories function
                System.out.println("\nTotal value of all the inventories: " + wh.TotalValueOfInventories());
                System.out.println();

                // test insert function
                System.out.println("\nInserting new values\n");
                wh.InsertARecord(in1);
                wh.InsertARecord(in2);
                wh.InsertARecord(in3);
                wh.InsertARecord(in4);
                wh.InsertARecord(in5);
                wh.InsertARecord(in6);
                wh.InsertARecord(in7);
                wh.InsertARecord(in8);
                wh.InsertARecord(in9);
                wh.InsertARecord(in10);
                wh.InsertARecord(in11);
        }

        @Test
        public void testWarehouseSize()
        {
                // test inventories in the database function after inserting new records
                System.out.println("\nNumber of inventories in the database: " + wh.InventoriesInDatabase());
        }

        @Test
        public void testInventoryValue() 
        {

                // test total value of all the inventories function after inserting new records
                System.out.println("\nTotal value of all the inventories: " + wh.TotalValueOfInventories());
                System.out.println();
        }
        @Test
        public void testRemove() {
                // test remove function
                System.out.println("\nRemoving records given a key\n");
                System.out.println("\nRemoved records from the database are: " + in1.getSKU() + in4.getSKU);
                wh.RemoveARecord("IN0001");
                wh.RemoveARecord("IN0004");
                
                System.out.println("\nNumber of inventories in the database: " + wh.InventoriesInDatabase());
                System.out.println("\nTotal value of all the inventories: " + wh.TotalValueOfInventories());
                System.out.println();
        }

        @Test
        public void testFind() {
                // Test find function
                System.out.println("\nFinding records given a key\n");
                System.out.println("\nIs " + in3.getSKU() + " in the database?");
                wh.findARecord("IN0003");
                System.out.println();
        }

        @Test
        public void testClear() {
                // Test clear function
                System.out.println("\nClearing the database (removeAll)\n");
                wh.clearDatabase();
                
                System.out.println("\nNumber of inventories in the database: " + wh.InventoriesInDatabase());
                System.out.println("\nTotal value of all the inventories: " + wh.TotalValueOfInventories());
                System.out.println();
        }
        
        @Test
        public void testIndex() {
        //Test createIndex function + BST
                                System.out.println("SKU");
				BSTNode<Inventory> in1 = wh.createIndex("SKU/ID");
				System.out.println();
				
				System.out.println("\nName\n");
				BSTNode<Inventory> in2 = wh.createIndex(|Name");
				System.out.println();
                                
				System.out.println("\nDescription\n");
				BSTNode<Inventory> in3 = wh.createIndex("Description");
				System.out.println();
				
				System.out.println("\nUnit Price\n");
				BSTNode<Inventory> in4 = wh.createIndex("Unit Price");
				System.out.println();
				
				System.out.println("\nQuantity in Stock\n");
				BSTNode<Inventory> in5 = wh.createIndex("Quantity in Stock");
				System.out.println();
                                
				System.out.println("\nInventory Value\n");
				BSTNode<Inventory> in6 = wh.createIndex("Inventory Value");
				System.out.println();
				
				System.out.println("\nReorder Level\n");
				BSTNode<Inventory> in7 = wh.createIndex("Reorder Level");
				System.out.println();
				
				System.out.println("\nReorder Time in Days\n");
				BSTNode<Inventory> in8 = wh.createIndex("Reorder Time in Days");
                                System.out.println();
				
				System.out.println("\nQuantity in Reorder\n");
				BSTNode<Inventory> in9 = wh.createIndex("Quantity in Reorder");
				System.out.println();
        
        }
}
