package coen352.a1;

// Class to form the list using ADTList interface that have the methods used
// and Node class that represents each block of list



public class LinkedList<ELEM> implements ADTList<ELEM> {

    private Node<ELEM> head;       //Object that points to head of list
    private Node<ELEM> tail;      // Object that points to tail of list
    private Node<ELEM> current;  // Object that points to current node of list

    private int nodeCount;      // Count number of node in list, length of list


    //CONSTRUCTORS

    public LinkedList() {

        System.out.println("LL constructor");
        //Create a node that doesn't have data in it
        current = tail = head = new Node<ELEM>(null);
        nodeCount = 0;
    }


    //Remove all elements in list

    @Override
    public void clear() {

        head.setNext(null);    //Disconnect head to other node

        //Remove any link to other node
        // Create a new head with no data in it
        current = tail = head = new Node<ELEM>(null);
        nodeCount = 0;
    }


    @Override
    //insert the element at current position
    public void insert(ELEM element) {







       if(this.numElements()==0)                                           // if list is empty
       {
          System.out.println("insert "+element+" in empty list");
           Node<ELEM> newNode = new Node<ELEM>(element, null);    //new node with the element passed and null as next node
           head = newNode;                                               // this.head = new node
           current = head;                                               // this.current = head = new node
           tail = current.getNext();                                     // this.tail = current.next = null
       }
       else
       {

           if(current.getNext()==null)                                  // if wanna insert at the end of list
           {
               System.out.println("insert "+element+" at end list");
               current.setNext(new Node<ELEM>(element,null));    // set next of current to a new node with element and null as next node
               tail = current.getNext();                                // this.tail = new node


           }
           else
           {

               Node<ELEM> temp = current;                         // temp is a copy of current pointer & is set to node that current is pointing to
               System.out.println("insert "+element+" at position "+getcurrPosition());
               current = current.getNext();
               Node<ELEM> newNode = new Node<ELEM>(element,current); // new node with element we want to add with next of old current as its next
               temp.setNext(newNode);                             // old current -> new node -> new current (old current next)

           }
       }




        nodeCount++;

    }

    //insert the element at the end of list
    @Override
    public void append(ELEM element) {

        /*
        System.out.println("append");
        tail = tail.setNext(new Node<ELEM>(element, null));
        nodeCount++;
        */


        if(head.getNext()==null)
        {
            System.out.println("append if");
            insert(element);

        }else {
            System.out.println("append else");
            tail = tail.setNext(new Node<ELEM>(element, null));
            nodeCount++;
        }

    }

    @Override
    //remove at current position
    public ELEM remove() {
        if (current == null) {       //ie nothing in list & constructor was applied
            return null;
        }


        ELEM removedItem = current.getElement();      // remember element that want to remove





        if (current == head) {                     // if want to remove the head
            head = head.getNext();                // Set a new head
            current.release();                    // put element that want to remove in freelist
            current = head;                       // set current to new head (old next of head)


        } else
        {
            Node<ELEM> movingIndex = head;            // Create an moving index that points to head

            //Move till reach previous of current
            while (movingIndex.getNext() != current)
            {
                movingIndex = movingIndex.getNext();
            }

            movingIndex.setNext(current.getNext());            // current.previous ---current (want to remove)---> current.next
            current.release();                                 // current (want to remove) -> freelist
            current = movingIndex;                             // current (old current.previous) -> old current.next
         }



        nodeCount--;
        return removedItem;
    }


    @Override
    public void moveToHead() {
        current = head;
    }

    @Override
    public void moveToTail() {

        if(tail==null)
        {
            System.out.println("tail = = null");
        }else{
            System.out.println("tail is "+ tail.getElement());
        }
        current = tail;
    }

    @Override
    public void moveToPrevious() {

        if (current == head) {
            return;
        }

        Node<ELEM> movingIndex = head;
        while (movingIndex.getNext() != current) {
            movingIndex = movingIndex.getNext();
        }
        current = movingIndex;
    }

    @Override
    public void moveToNext() {
        if (current != tail) {
            current = current.getNext();
        }
    }


    @Override
    public int numElements() {
        return nodeCount;
    }


    @Override
    public int getcurrPosition() {
        Node<ELEM> movingIndex = head;

        int i;
        for (i = 0; current != movingIndex; i++) {
            movingIndex = movingIndex.getNext();
        }
        System.out.println("Current position is "+i);
        return i;
    }

    @Override
    public void setCurrPosition(int position) {
        assert (position >= 0) && (position <= nodeCount) : "Position entered out of range";

        current = head;
        for (int i = 0; i < position; i++)
            current = current.getNext();
        //The third node will be at position i=2

    }

    @Override
    public ELEM getElement() {
        return current.getElement();
    }


    public String toString() {

        System.out.println("to string of list");
        // Save the current position of the list
        int oldPos = getcurrPosition();
        int numElements = numElements();
        StringBuffer out = new StringBuffer((numElements() + 1) * 4);

        moveToHead();
        out.append("< ");
        for (int i = 0; i < oldPos; i++) {
            out.append(getElement());
            out.append(" ");
            moveToNext();

        }
        out.append("| ");
        for (int i = oldPos; i < numElements; i++) {
            out.append(getElement());
            out.append(" ");
            moveToNext();

        }

        out.append(">");
        setCurrPosition(oldPos); // Reset the fence to its original position
        return out.toString();
    }

}




